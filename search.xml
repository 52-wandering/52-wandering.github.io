<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>first blog</title>
    <url>/2020/06/10/first-blog/</url>
    <content><![CDATA[<p>终于做好了hexo博客的安装和部署，写下此文，当作这个博客的开端，希望自己能多积累，多长进。</p>
<p>凡事需要坚持，坚持才能胜利。</p>
]]></content>
      <tags>
        <tag>blogtest</tag>
      </tags>
  </entry>
  <entry>
    <title>（python个人博客打造之一）——需求&amp;环境准备</title>
    <url>/2020/06/15/%E9%9C%80%E6%B1%82-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>学习需要积累，通常最好的实现方式是做笔记。为此，我们需要一个可以记录并分享自己所学，并能随时查阅复习的系统，最好的选择，就是建立一个博客系统。</p>
<p>接下来，我们将要用python的web框架Django，来实现一个自己的博客系统。</p>
<p>博客系统的需求分析：</p>
<ol>
<li>可以记录自己的笔记，或者想分享的知识技术，有一个清晰简洁的编辑页面</li>
<li>能将自己的知识在网上分享展示出来，页面清晰优雅</li>
<li>可以随时复习查阅，可以随时查找文章</li>
<li>开启评论功能，增加交流</li>
<li>开启社交功能，设置登录留言，直接联系博主</li>
</ol>
<p>综合以上需求，我们将会实现一个博客系统，同时通过这个项目，可以很好地学习python和Django实现项目的过程。</p>
<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>此教程不会过多地详述关于python和Django的基础知识，我们会着重讲流程和相关库的使用，达到熟悉流程和项目依赖的效果。</p>
<p>你需要：</p>
<ul>
<li><input disabled type="checkbox"> 一部可以上网的电脑，操作一般软件，至少不会卡顿的性能，系统最好是ubuntu18.04，作者的系统就是ubuntu18.04，若是其他系统，清自行做好兼容准备。</li>
<li><input disabled type="checkbox"> 浏览器：建议使用谷歌浏览器</li>
<li><input disabled type="checkbox"> python编辑器：pycharm，社区版即可，免费。</li>
<li><input disabled type="checkbox"> 自行学习python3的基础知识，至少了解到python 的语法，基本数据结构，函数，类，以及描述符，WSGI等</li>
<li><input disabled type="checkbox"> 安装python3.6，其他版本请自行了解清楚，</li>
<li><input disabled type="checkbox"> 了解SQL，知道关系型数据库</li>
<li><input disabled type="checkbox"> 安装Mysql8，若是想用django自带的Sqlite也可以（无需先安装），数据库是可以换的，难度不大</li>
<li><input disabled type="checkbox"> 了解一下bootstrap4.5，此博客将会使用此来做前端页面。</li>
<li><input disabled type="checkbox"> 如果想部署公网的话，可以提前购买好云服务器和域名，了解备案。（本教程将暂时不会涉及到部署，需要了解，可以私信作者）</li>
</ul>
<h2 id="博客架构"><a href="#博客架构" class="headerlink" title="博客架构"></a>博客架构</h2><ol>
<li>语言：python 3.6</li>
<li>后端： django 3</li>
<li>前端： bootstrap 4</li>
<li>数据库： Mysql 8 或者sqlite</li>
</ol>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开终端，创建虚拟环境，并非项目路径</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="comment">#进入某个目录，如/home/xx/project</span></span><br><span class="line">virtualenv myblog-env  <span class="comment">#创建一个名为myblog-env的目录, 并且安装了myblog-env/bin/python, 创建了lib,bin目录,安装了pip</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>lib</code>,所有安装的python库都会放在这个目录中的<code>lib/python3.6/site-packages/</code>下</li>
<li><code>bin</code>,<code>bin/python</code>是在当前环境是使用的python解释器，pycharm解释器的选择就在此</li>
<li>以上目录就是虚拟环境的所在了，接下来在开发过程中，我们安装的依赖和包都会在这个目录下，与整体全局的环境隔离开</li>
</ol>
<h3 id="虚拟环境常用命令"><a href="#虚拟环境常用命令" class="headerlink" title="虚拟环境常用命令"></a>虚拟环境常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip list <span class="comment">#显示所有安装的包</span></span><br><span class="line">pip freeze  <span class="comment">#显示所有依赖</span></span><br><span class="line">pip freeze &gt; requirement.txt  <span class="comment">#生成requirement.txt文件</span></span><br><span class="line">pip install -r requirement.txt  <span class="comment">#根据requirement.txt生成相同的环境</span></span><br><span class="line"></span><br><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">deactiate <span class="comment">#关闭虚拟环境</span></span><br></pre></td></tr></table></figure>

<h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">pip install  django <span class="comment">#会自动安装最新版，如果不指定版本</span></span><br><span class="line">pip install mysqlclient <span class="comment">#连接Mysql，建议使用mysqlclient</span></span><br></pre></td></tr></table></figure>

<p>以上就是整个环境和基础的准备，接下来，我们可以进入到打造博客系统的核心环节</p>
]]></content>
      <tags>
        <tag>python, blog</tag>
      </tags>
  </entry>
  <entry>
    <title>（python个人博客打造之二）——启动django和后台</title>
    <url>/2020/06/16/%EF%BC%88python%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%93%E9%80%A0%E4%B9%8B%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%90%AF%E5%8A%A8django%E5%92%8C%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="安装Django-3"><a href="#安装Django-3" class="headerlink" title="安装Django 3"></a>安装Django 3</h2><p>新建项目目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">mkdir myblog <span class="comment">#项目目录</span></span><br><span class="line">cd myblog <span class="comment">#进入目录</span></span><br><span class="line">pip install django <span class="comment">#安装django</span></span><br></pre></td></tr></table></figure>

<h2 id="使用pycharm"><a href="#使用pycharm" class="headerlink" title="使用pycharm"></a>使用pycharm</h2><h3 id="设置pycharm解释器"><a href="#设置pycharm解释器" class="headerlink" title="设置pycharm解释器"></a>设置pycharm解释器</h3><p>为了更好地使用pycharm，我们可以将该项目的解释器设置为上一篇博文中，安装的虚拟环境的python3.6，即myblog-env/bin/python3.6，这样，我们的解释器就会和项目安装的依赖同步。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li><p>打开pycharm</p>
</li>
<li><p>点击右下角 python3.6 位置</p>
</li>
<li><img src="/2020/06/16/%EF%BC%88python%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%93%E9%80%A0%E4%B9%8B%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%90%AF%E5%8A%A8django%E5%92%8C%E5%90%8E%E5%8F%B0/fan/图片/1.png" alt="1" style="zoom:80%;">
</li>
<li><p>点击interpreter setting</p>
</li>
<li><img src="/2020/06/16/%EF%BC%88python%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%93%E9%80%A0%E4%B9%8B%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%90%AF%E5%8A%A8django%E5%92%8C%E5%90%8E%E5%8F%B0/fan/图片/2020-06-17 14-13-52 的屏幕截图.png" alt="2020-06-17 14-13-52 的屏幕截图" style="zoom:80%;">
</li>
<li><p>点击add</p>
</li>
<li><p>![2020-06-17 14-14-22 的屏幕截图](/home/fan/图片/2020-06-17 14-14-22 的屏幕截图.png)</p>
</li>
<li><p>点击existing environment,点击interpreter右侧的方框，查找上述所说的路径，选择python3.6</p>
<p>![2020-06-17 14-14-32 的屏幕截图](/home/fan/图片/2020-06-17 14-14-32 的屏幕截图.png)</p>
<p>点击ok</p>
<p>![2020-06-17 14-14-54 的屏幕截图](/home/fan/图片/2020-06-17 14-14-54 的屏幕截图.png)</p>
<p>点击make available to all projects，点击ok</p>
<p>![2020-06-17 14-15-01 的屏幕截图](/home/fan/图片/2020-06-17 14-15-01 的屏幕截图.png)</p>
<p>可见本地已安装的依赖，点击ok，回到pycharm，可见右下角的解释器已经为python3.6(myblog-env)</p>
<p>![2020-06-17 14-15-43 的屏幕截图](/home/fan/图片/2020-06-17 14-15-43 的屏幕截图.png)</p>
</li>
</ol>
<h2 id="django-新建工程目录"><a href="#django-新建工程目录" class="headerlink" title="django 新建工程目录"></a>django 新建工程目录</h2><p>在终端下，输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin startproject blog /home/fan/project/myblog <span class="comment">#blog为项目名，后面为项目目录路径，不设置将会在当前目录下</span></span><br></pre></td></tr></table></figure>

<p>生成项目目录如下：</p>
<p>![2020-06-17 14-47-18屏幕截图](/home/fan/图片/2020-06-17 14-47-18屏幕截图.png)</p>
]]></content>
      <tags>
        <tag>django blog</tag>
      </tags>
  </entry>
</search>
