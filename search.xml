<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（python个人博客打造之二）——启动django和后台</title>
    <url>/2020/06/16/%EF%BC%88python%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%89%93%E9%80%A0%E4%B9%8B%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%90%AF%E5%8A%A8django%E5%92%8C%E5%90%8E%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="安装Django-3"><a href="#安装Django-3" class="headerlink" title="安装Django 3"></a>安装Django 3</h2><p>新建项目目录：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">mkdir myblog <span class="comment">#项目目录</span></span><br><span class="line">cd myblog <span class="comment">#进入目录</span></span><br><span class="line">pip install django <span class="comment">#安装django</span></span><br></pre></td></tr></table></figure>

<h2 id="使用pycharm"><a href="#使用pycharm" class="headerlink" title="使用pycharm"></a>使用pycharm</h2><h3 id="设置pycharm解释器"><a href="#设置pycharm解释器" class="headerlink" title="设置pycharm解释器"></a>设置pycharm解释器</h3><p>为了更好地使用pycharm，我们可以将该项目的解释器设置为上一篇博文中，安装的虚拟环境的python3.6，即myblog-env/bin/python3.6，这样，我们的解释器就会和项目安装的依赖同步。</p>
<h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol>
<li>打开pycharm</li>
<li>点击右下角 python3.6 位置</li>
<li><img src="/images/20-6-17/1.png" alt="1" style="zoom:80%;"></li>
<li>点击interpreter setting</li>
<li><img src="/images/20-6-17/2.png" alt="2" style="zoom:80%;"></li>
<li>点击add</li>
<li><img src="/images/20-6-17/3.png" alt="3" style="zoom:80%;"></li>
<li>点击existing environment,点击interpreter右侧的方框，查找上述所说的路径，选择python3.6</li>
<li><img src="/images/20-6-17/4.png" alt="4" style="zoom:80%;"></li>
<li>点击ok</li>
<li><img src="/images/20-6-17/5.png" alt="5" style="zoom:80%;"></li>
<li>点击make available to all projects，点击ok</li>
<li><img src="/images/20-6-17/6.png" alt="6" style="zoom:80%;"></li>
<li>可见本地已安装的依赖，点击ok，回到pycharm，可见右下角的解释器已经为python3.6(myblog-env)</li>
<li><img src="/images/20-6-17/7.png" alt="7" style="zoom:80%;">

</li>
</ol>
<h2 id="django-新建工程目录"><a href="#django-新建工程目录" class="headerlink" title="django 新建工程目录"></a>django 新建工程目录</h2><p>在终端下，输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin startproject blog /home/fan/project/myblog <span class="comment">#blog为项目名，后面为项目目录路径，不设置将会在当前目录下</span></span><br></pre></td></tr></table></figure>

<p>生成项目目录如下：</p>
<img src="/images/20-6-17/8.png" alt="8" style="zoom:80%;">

<h2 id="django启动"><a href="#django启动" class="headerlink" title="django启动"></a>django启动</h2><p>输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8000</span> <span class="comment">#端口可以设定</span></span><br></pre></td></tr></table></figure>

<p>打开浏览器，输入：127.0.0.1:8000，可以看到django已经启动了</p>
<img src="/images/20-6-17/9.png" alt="9" style="zoom:80%;">

<h2 id="连接Mysql"><a href="#连接Mysql" class="headerlink" title="连接Mysql"></a>连接Mysql</h2><h3 id="django自带sqlite3"><a href="#django自带sqlite3" class="headerlink" title="django自带sqlite3"></a>django自带sqlite3</h3><p>django自带的数据库为sqlite3，无需安装和更改即可使用。打开settings.py，找到：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上为sqlite3的配置，无需改动，如果采用此数据库，后面的连接mysql可以跳过。sqlite对一个博客系统来说，是足够的，也可以不用mysql，有兴趣的可以自行了解二者的区别。</p>
<h3 id="使用mysql"><a href="#使用mysql" class="headerlink" title="使用mysql"></a>使用mysql</h3><h4 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line"><span class="comment">#输入mysql root 用户密码</span></span><br><span class="line">create user username identified by <span class="string">'password'</span>; <span class="comment">#新建一个用户，username，password自定</span></span><br><span class="line">create database xxx; <span class="comment">#新建数据库，xx自定</span></span><br><span class="line">grant all privileges on 数据库名.* to <span class="string">'新建用户名'</span>@<span class="string">'%'</span>;  <span class="comment">#将新建数据库的所有权限赋予新建用户</span></span><br><span class="line">flush privileges; <span class="comment">#刷新</span></span><br></pre></td></tr></table></figure>

<h4 id="settings-py-配置"><a href="#settings-py-配置" class="headerlink" title="settings.py 配置"></a>settings.py 配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"ENGINE"</span>: <span class="string">"django.db.backends.mysql"</span>,</span><br><span class="line">        <span class="string">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"PORT"</span>: <span class="number">3306</span>,</span><br><span class="line">        <span class="string">"USER"</span>: <span class="string">"username"</span>,</span><br><span class="line">        <span class="string">"PASSWORD"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">        <span class="string">"NAME"</span>: <span class="string">"database-name"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="安装mysqlclient"><a href="#安装mysqlclient" class="headerlink" title="安装mysqlclient"></a>安装mysqlclient</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install mysqlclient</span><br></pre></td></tr></table></figure>

<h4 id="重启django服务器"><a href="#重启django服务器" class="headerlink" title="重启django服务器"></a>重启django服务器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver <span class="number">8000</span></span><br></pre></td></tr></table></figure>

<p>如果不报错，则表明连接mysql成功。</p>
<h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><p>上述步骤中，终端中，会有反馈：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run 'python manage.py migrate' to apply them.</span><br></pre></td></tr></table></figure>

<p>django中自带了很多app，如果需要使用它们，需要先进行数据库的迁移。</p>
<p>django自带的app和中间件：</p>
<img src="/images/20-6-17/10.png" alt="10" style="zoom:80%;">

<p><strong>一般情况下，如果你已经是大神级别了，就知道这些是什么模块或者组件，当你还是入门级别时，通常情况下，都不需要改动这些，除非教程里有步骤说明</strong>。</p>
<h3 id="数据库迁移-1"><a href="#数据库迁移-1" class="headerlink" title="数据库迁移"></a>数据库迁移</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations <span class="comment">#记录迁移内容，生成migrations文件夹</span></span><br><span class="line">python manage.py migrate <span class="comment">#迁移数据库</span></span><br></pre></td></tr></table></figure>

<p>输入以上内容，查看输出。</p>
<img src="/images/20-6-17/11.png" alt="11" style="zoom:80%;">

<p><strong>django中数据库的使用，可以分为以下几个步骤：</strong></p>
<ol>
<li>连接数据库（settings.py中的DATABASES设置）</li>
<li>通过自带的django ORM，创建数据库模型（一个数据库模型，对应一张数据库的表）</li>
<li>迁移数据库；迁移数据库前，先进行的makemigrations用来记录数据模型的变化，生成migrations文件夹（上一步骤没产生），migrate根据变化，来生成或修改数据库中的表格</li>
<li>在程序编码过程中，如果修改了数据库模型，需要运行以上两个命令</li>
<li>程序运行过程中，通过已经连接的配置，对数据库表的内容进行增删改查</li>
</ol>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>在mysql中，查看对应的数据库，看看是否是生成了刚才终端中输出的数据表。</p>
<h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><p>输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br><span class="line">   <span class="comment">#输入用户名，邮箱，密码，相当于注册一个用户</span></span><br></pre></td></tr></table></figure>

<p>成功创建后，可以用这个用户来登录后台进行管理</p>
<h2 id="登录后台"><a href="#登录后台" class="headerlink" title="登录后台"></a>登录后台</h2><p>重新启动django服务器，在浏览器中输入127.0.0.1:8000/admin，</p>
<img src="/images/20-6-17/12.png" alt="12" style="zoom:80%;">

<p>输入刚才创建的超级用户，即可登录后台。</p>
<img src="/images/20-6-17/13.png" alt="13" style="zoom:80%;">

<p>目前可以看到，一个django自带的后台管理了。</p>
<h3 id="Group管理"><a href="#Group管理" class="headerlink" title="Group管理"></a>Group管理</h3><p>点击Group（组）的add，可以添加一组拥有某些权限的组，将普通用户归到这些组，即可拥有对应的权限。</p>
<img src="/images/20-6-17/14.png" alt="14" style="zoom:80%;">

<h3 id="User管理"><a href="#User管理" class="headerlink" title="User管理"></a>User管理</h3><p>点击User的add，可以添加一个用户：</p>
<img src="/images/20-6-17/15.png" alt="15" style="zoom:80%;">

<p>点击save后，可以进行用户信息和权限的具体更改：</p>
<ul>
<li>用户名和邮箱</li>
</ul>
<img src="/images/20-6-17/16.png" alt="16" style="zoom:80%;">

<ul>
<li><p>用户权限</p>
<p>Active–是否激活，默认激活，可用于前端登录普通用户验证是否已激活</p>
<p>Staff status–是否可以登录后台管理站点，默认为否</p>
<p>Superuser status–是否超级用户，默认为否。超级用户拥有所有权限</p>
<img src="/images/20-6-17/17.png" alt="17" style="zoom:80%;">
</li>
<li><p>Group/User pemission</p>
<p>Group/User pemission决定是否该用户是否拥有某个组的权限或者某些权限</p>
<img src="/images/20-6-17/18.png" alt="18" style="zoom:80%;">
</li>
<li><p>import date</p>
<p>登录日期，注册日期等信息</p>
<img src="/images/20-6-17/19.png" alt="19" style="zoom:80%;">

</li>
</ul>
<p>以上，就是django启动和后台登录的操作，接下来，我们将会讲解django等基本操作。</p>
]]></content>
      <tags>
        <tag>django blog</tag>
      </tags>
  </entry>
  <entry>
    <title>first blog</title>
    <url>/2020/06/10/first-blog/</url>
    <content><![CDATA[<p>终于做好了hexo博客的安装和部署，写下此文，当作这个博客的开端，希望自己能多积累，多长进。</p>
<p>凡事需要坚持，坚持才能胜利。</p>
]]></content>
      <tags>
        <tag>blogtest</tag>
      </tags>
  </entry>
  <entry>
    <title>（python个人博客打造之一）——需求&amp;环境准备</title>
    <url>/2020/06/15/%E9%9C%80%E6%B1%82-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>学习需要积累，通常最好的实现方式是做笔记。为此，我们需要一个可以记录并分享自己所学，并能随时查阅复习的系统，最好的选择，就是建立一个博客系统。</p>
<p>接下来，我们将要用python的web框架Django，来实现一个自己的博客系统。</p>
<p>博客系统的需求分析：</p>
<ol>
<li>可以记录自己的笔记，或者想分享的知识技术，有一个清晰简洁的编辑页面</li>
<li>能将自己的知识在网上分享展示出来，页面清晰优雅</li>
<li>可以随时复习查阅，可以随时查找文章</li>
<li>开启评论功能，增加交流</li>
<li>开启社交功能，设置登录留言，直接联系博主</li>
</ol>
<p>综合以上需求，我们将会实现一个博客系统，同时通过这个项目，可以很好地学习python和Django实现项目的过程。</p>
<h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>此教程不会过多地详述关于python和Django的基础知识，我们会着重讲流程和相关库的使用，达到熟悉流程和项目依赖的效果。</p>
<p>你需要：</p>
<ul>
<li><input disabled type="checkbox"> 一部可以上网的电脑，操作一般软件，至少不会卡顿的性能，系统最好是ubuntu18.04，作者的系统就是ubuntu18.04，若是其他系统，清自行做好兼容准备。</li>
<li><input disabled type="checkbox"> 浏览器：建议使用谷歌浏览器</li>
<li><input disabled type="checkbox"> python编辑器：pycharm，社区版即可，免费。</li>
<li><input disabled type="checkbox"> 自行学习python3的基础知识，至少了解到python 的语法，基本数据结构，函数，类，以及描述符，WSGI等</li>
<li><input disabled type="checkbox"> 安装python3.6，其他版本请自行了解清楚，</li>
<li><input disabled type="checkbox"> 了解SQL，知道关系型数据库</li>
<li><input disabled type="checkbox"> 安装Mysql8，若是想用django自带的Sqlite也可以（无需先安装），数据库是可以换的，难度不大</li>
<li><input disabled type="checkbox"> 了解一下bootstrap4.5，此博客将会使用此来做前端页面。</li>
<li><input disabled type="checkbox"> 如果想部署公网的话，可以提前购买好云服务器和域名，了解备案。（本教程将暂时不会涉及到部署，需要了解，可以私信作者）</li>
</ul>
<h2 id="博客架构"><a href="#博客架构" class="headerlink" title="博客架构"></a>博客架构</h2><ol>
<li>语言：python 3.6</li>
<li>后端： django 3</li>
<li>前端： bootstrap 4</li>
<li>数据库： Mysql 8 或者sqlite</li>
</ol>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开终端，创建虚拟环境，并非项目路径</span></span><br><span class="line">pip install virtualenv</span><br><span class="line"><span class="comment">#进入某个目录，如/home/xx/project</span></span><br><span class="line">virtualenv myblog-env  <span class="comment">#创建一个名为myblog-env的目录, 并且安装了myblog-env/bin/python, 创建了lib,bin目录,安装了pip</span></span><br></pre></td></tr></table></figure>

<ol>
<li><code>lib</code>,所有安装的python库都会放在这个目录中的<code>lib/python3.6/site-packages/</code>下</li>
<li><code>bin</code>,<code>bin/python</code>是在当前环境是使用的python解释器，pycharm解释器的选择就在此</li>
<li>以上目录就是虚拟环境的所在了，接下来在开发过程中，我们安装的依赖和包都会在这个目录下，与整体全局的环境隔离开</li>
</ol>
<h3 id="虚拟环境常用命令"><a href="#虚拟环境常用命令" class="headerlink" title="虚拟环境常用命令"></a>虚拟环境常用命令</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip list <span class="comment">#显示所有安装的包</span></span><br><span class="line">pip freeze  <span class="comment">#显示所有依赖</span></span><br><span class="line">pip freeze &gt; requirement.txt  <span class="comment">#生成requirement.txt文件</span></span><br><span class="line">pip install -r requirement.txt  <span class="comment">#根据requirement.txt生成相同的环境</span></span><br><span class="line"></span><br><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">deactiate <span class="comment">#关闭虚拟环境</span></span><br></pre></td></tr></table></figure>

<h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">source myblog-env/bin/activate <span class="comment">#开启虚拟环境</span></span><br><span class="line">pip install  django <span class="comment">#会自动安装最新版，如果不指定版本</span></span><br><span class="line">pip install mysqlclient <span class="comment">#连接Mysql，建议使用mysqlclient</span></span><br></pre></td></tr></table></figure>

<p>以上就是整个环境和基础的准备，接下来，我们可以进入到打造博客系统的核心环节</p>
]]></content>
      <tags>
        <tag>python, blog</tag>
      </tags>
  </entry>
</search>
